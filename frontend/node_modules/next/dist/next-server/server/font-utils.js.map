{"version":3,"sources":["../../../next-server/server/font-utils.ts"],"names":["https","require","CHROME_UA","IE_UA","getFontForUA","url","UA","Promise","resolve","reject","rawData","get","headers","res","on","chunk","toString","e","getFontDefinitionFromNetwork","result","Log","warn","getFontDefinitionFromManifest","manifest","find","font","content"],"mappings":"2KAAA,mE,qzBACA,KAAMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,OAAD,CAArB,CAEA,KAAMC,CAAAA,SAAS,CACb,0HADF,CAEA,KAAMC,CAAAA,KAAK,CAAG,gEAAd,CAOA,QAASC,CAAAA,YAAT,CAAsBC,GAAtB,CAAmCC,EAAnC,CAAgE,CAC9D,MAAO,IAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACtC,GAAIC,CAAAA,OAAY,CAAG,EAAnB,CACAV,KAAK,CACFW,GADH,CAEIN,GAFJ,CAGI,CACEO,OAAO,CAAE,CACP,aAAcN,EADP,CADX,CAHJ,CAQKO,GAAD,EAAc,CACZA,GAAG,CAACC,EAAJ,CAAO,MAAP,CAAgBC,KAAD,EAAgB,CAC7BL,OAAO,EAAIK,KAAX,CACD,CAFD,EAGAF,GAAG,CAACC,EAAJ,CAAO,KAAP,CAAc,IAAM,CAClBN,OAAO,CAACE,OAAO,CAACM,QAAR,CAAiB,MAAjB,CAAD,CAAP,CACD,CAFD,EAGD,CAfL,EAiBGF,EAjBH,CAiBM,OAjBN,CAiBgBG,CAAD,EAAc,CACzBR,MAAM,CAACQ,CAAD,CAAN,CACD,CAnBH,EAoBD,CAtBM,CAAP,CAuBD,CAEM,cAAeC,CAAAA,4BAAf,CACLb,GADK,CAEY,CACjB,GAAIc,CAAAA,MAAM,CAAG,EAAb,CACA;AACF;AACA;AACA,KACE,GAAI,CACFA,MAAM,EAAI,KAAMf,CAAAA,YAAY,CAACC,GAAD,CAAMF,KAAN,CAA5B,CACAgB,MAAM,EAAI,KAAMf,CAAAA,YAAY,CAACC,GAAD,CAAMH,SAAN,CAA5B,CACD,CAAC,MAAOe,CAAP,CAAU,CACVG,GAAG,CAACC,IAAJ,CACG,yCAAwChB,GAAI,iCAD/C,EAGA,MAAO,EAAP,CACD,CAED,MAAOc,CAAAA,MAAP,CACD,CAEM,QAASG,CAAAA,6BAAT,CACLjB,GADK,CAELkB,QAFK,CAGG,oBACR,MACE,iBAAAA,QAAQ,CAACC,IAAT,CAAeC,IAAD,EAAU,CACtB,GAAIA,IAAI,EAAIA,IAAI,CAACpB,GAAL,GAAaA,GAAzB,CAA8B,CAC5B,MAAO,KAAP,CACD,CACD,MAAO,MAAP,CACD,CALD,+BAKIqB,OALJ,GAKe,EANjB,CAQD","sourcesContent":["import * as Log from '../../build/output/log'\nconst https = require('https')\n\nconst CHROME_UA =\n  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'\nconst IE_UA = 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko'\n\nexport type FontManifest = Array<{\n  url: string\n  content: string\n}>\n\nfunction getFontForUA(url: string, UA: string): Promise<String> {\n  return new Promise((resolve, reject) => {\n    let rawData: any = ''\n    https\n      .get(\n        url,\n        {\n          headers: {\n            'user-agent': UA,\n          },\n        },\n        (res: any) => {\n          res.on('data', (chunk: any) => {\n            rawData += chunk\n          })\n          res.on('end', () => {\n            resolve(rawData.toString('utf8'))\n          })\n        }\n      )\n      .on('error', (e: Error) => {\n        reject(e)\n      })\n  })\n}\n\nexport async function getFontDefinitionFromNetwork(\n  url: string\n): Promise<string> {\n  let result = ''\n  /**\n   * The order of IE -> Chrome is important, other wise chrome starts loading woff1.\n   * CSS cascading 🤷‍♂️.\n   */\n  try {\n    result += await getFontForUA(url, IE_UA)\n    result += await getFontForUA(url, CHROME_UA)\n  } catch (e) {\n    Log.warn(\n      `Failed to download the stylesheet for ${url}. Skipped optimizing this font.`\n    )\n    return ''\n  }\n\n  return result\n}\n\nexport function getFontDefinitionFromManifest(\n  url: string,\n  manifest: FontManifest\n): string {\n  return (\n    manifest.find((font) => {\n      if (font && font.url === url) {\n        return true\n      }\n      return false\n    })?.content || ''\n  )\n}\n"]}