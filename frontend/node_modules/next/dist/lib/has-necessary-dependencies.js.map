{"version":3,"sources":["../../lib/has-necessary-dependencies.ts"],"names":["requiredTSPackages","file","pkg","requiredLintPackages","hasNecessaryDependencies","baseDir","checkTSDeps","checkESLintDeps","eslintrcFile","resolved","undefined","resolutions","Map","requiredPackages","missingPackages","filter","p","set","require","resolve","paths","_","length","get","packagesHuman","map","packagesCli","join","yarnLockFile","path","isYarn","catch","removalMsg","chalk","bold","cyan","basename","FatalError","red"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\n\nimport { fileExists } from './file-exists'\nimport { getOxfordCommaList } from './oxford-comma-list'\nimport { FatalError } from './fatal-error'\n\nconst requiredTSPackages = [\n  { file: 'typescript', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/node/index.d.ts', pkg: '@types/node' },\n]\n\nconst requiredLintPackages = [\n  { file: 'eslint/lib/api.js', pkg: 'eslint' },\n  { file: 'eslint-config-next', pkg: 'eslint-config-next' },\n]\n\nexport type NecessaryDependencies = {\n  resolved: string\n}\n\nexport async function hasNecessaryDependencies(\n  baseDir: string,\n  checkTSDeps: boolean,\n  checkESLintDeps: boolean,\n  eslintrcFile: string | null = null\n): Promise<NecessaryDependencies> {\n  if (!checkTSDeps && !checkESLintDeps) {\n    return { resolved: undefined! }\n  }\n\n  let resolutions = new Map<string, string>()\n  let requiredPackages = checkESLintDeps\n    ? requiredLintPackages\n    : requiredTSPackages\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, require.resolve(p.file, { paths: [baseDir] }))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return {\n      resolved: checkESLintDeps\n        ? resolutions.get('eslint')!\n        : resolutions.get('typescript')!,\n    }\n  }\n\n  const packagesHuman = getOxfordCommaList(missingPackages.map((p) => p.pkg))\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  const yarnLockFile = path.join(baseDir, 'yarn.lock')\n  const isYarn = await fileExists(yarnLockFile).catch(() => false)\n  const removalMsg = checkTSDeps\n    ? chalk.bold(\n        'If you are not trying to use TypeScript, please remove the ' +\n          chalk.cyan('tsconfig.json') +\n          ' file from your package root (and any TypeScript files in your pages directory).'\n      )\n    : chalk.bold(\n        `If you are not trying to use ESLint, please remove the ${\n          eslintrcFile\n            ? chalk.cyan(path.basename(eslintrcFile)) +\n              ' file from your application'\n            : chalk.cyan('eslintConfig') + ' field from your package.json file'\n        }.`\n      )\n\n  throw new FatalError(\n    chalk.bold.red(\n      `It looks like you're trying to use ${\n        checkTSDeps ? 'TypeScript' : 'ESLint'\n      } but do not have the required package(s) installed.`\n    ) +\n      '\\n\\n' +\n      chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`) +\n      '\\n\\n' +\n      `\\t${chalk.bold.cyan(\n        (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n          ' ' +\n          packagesCli\n      )}` +\n      '\\n\\n' +\n      removalMsg +\n      '\\n'\n  )\n}\n"]}