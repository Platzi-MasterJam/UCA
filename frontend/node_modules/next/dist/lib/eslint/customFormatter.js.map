{"version":3,"sources":["../../../lib/eslint/customFormatter.ts"],"names":["MessageSeverity","formatMessage","dir","messages","filePath","fileName","path","posix","normalize","relative","replace","startsWith","output","chalk","cyan","i","length","message","severity","line","column","ruleId","yellow","toString","Warning","bold","red","gray","formatResults","baseDir","results","filter","map","join"],"mappings":"wGAAA,oDACA,kD,mFAEA;GACYA,CAAAA,e,mDAAAA,e,EAAAA,e,CAAAA,e,yBAAAA,e,CAAAA,e,wBAAAA,e,2BAAAA,e,MAsBZ,QAASC,CAAAA,aAAT,CACEC,GADF,CAEEC,QAFF,CAGEC,QAHF,CAIiB,CACf,GAAIC,CAAAA,QAAQ,CAAGC,cAAKC,KAAL,CAAWC,SAAX,CACbF,cAAKG,QAAL,CAAcP,GAAd,CAAmBE,QAAnB,EAA6BM,OAA7B,CAAqC,KAArC,CAA4C,GAA5C,CADa,CAAf,CAIA,GAAI,CAACL,QAAQ,CAACM,UAAT,CAAoB,GAApB,CAAL,CAA+B,CAC7BN,QAAQ,CAAG,KAAOA,QAAlB,CACD,CAED,GAAIO,CAAAA,MAAM,CAAG,KAAOC,eAAMC,IAAN,CAAWT,QAAX,CAApB,CAEA,IAAK,GAAIU,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGZ,QAAQ,CAACa,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CACxC,KAAM,CAAEE,OAAF,CAAWC,QAAX,CAAqBC,IAArB,CAA2BC,MAA3B,CAAmCC,MAAnC,EAA8ClB,QAAQ,CAACY,CAAD,CAA5D,CAEAH,MAAM,CAAGA,MAAM,CAAG,IAAlB,CAEA,GAAIO,IAAI,EAAIC,MAAZ,CAAoB,CAClBR,MAAM,CACJA,MAAM,CACNC,eAAMS,MAAN,CAAaH,IAAI,CAACI,QAAL,EAAb,CADA,CAEA,GAFA,CAGAV,eAAMS,MAAN,CAAaF,MAAM,CAACG,QAAP,EAAb,CAHA,CAIA,IALF,CAMD,CAED,GAAIL,QAAQ,GAAKlB,eAAe,CAACwB,OAAjC,CAA0C,CACxCZ,MAAM,EAAIC,eAAMS,MAAN,CAAaG,IAAb,CAAkB,SAAlB,EAA+B,IAAzC,CACD,CAFD,IAEO,CACLb,MAAM,EAAIC,eAAMa,GAAN,CAAUD,IAAV,CAAe,OAAf,EAA0B,IAApC,CACD,CAEDb,MAAM,EAAIK,OAAV,CAEA,GAAII,MAAJ,CAAY,CACVT,MAAM,EAAI,KAAOC,eAAMc,IAAN,CAAWF,IAAX,CAAgBJ,MAAhB,CAAjB,CACD,CACF,CAED,MAAOT,CAAAA,MAAP,CACD,CAEM,QAASgB,CAAAA,aAAT,CAAuBC,OAAvB,CAAwCC,OAAxC,CAAuE,CAC5E,MACEA,CAAAA,OAAO,CACJC,MADH,CACU,CAAC,CAAE5B,QAAF,CAAD,GAAkBA,QAAlB,cAAkBA,QAAQ,CAAEa,MADtC,EAEGgB,GAFH,CAEO,CAAC,CAAE7B,QAAF,CAAYC,QAAZ,CAAD,GACHH,aAAa,CAAC4B,OAAD,CAAU1B,QAAV,CAAoBC,QAApB,CAHjB,EAKG6B,IALH,CAKQ,IALR,EAKgB,IANlB,CAQD","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\n\n// eslint-disable-next-line no-shadow\nexport enum MessageSeverity {\n  Warning = 1,\n  Error = 2,\n}\n\ninterface LintMessage {\n  ruleId: string | null\n  severity: 1 | 2\n  message: string\n  line: number\n  column: number\n}\n\ninterface LintResult {\n  filePath: string\n  messages: LintMessage[]\n  errorCount: number\n  warningCount: number\n  output?: string\n  source?: string\n}\n\nfunction formatMessage(\n  dir: string,\n  messages: LintMessage[],\n  filePath: string\n): string | void {\n  let fileName = path.posix.normalize(\n    path.relative(dir, filePath).replace(/\\\\/g, '/')\n  )\n\n  if (!fileName.startsWith('.')) {\n    fileName = './' + fileName\n  }\n\n  let output = '\\n' + chalk.cyan(fileName)\n\n  for (let i = 0; i < messages.length; i++) {\n    const { message, severity, line, column, ruleId } = messages[i]\n\n    output = output + '\\n'\n\n    if (line && column) {\n      output =\n        output +\n        chalk.yellow(line.toString()) +\n        ':' +\n        chalk.yellow(column.toString()) +\n        '  '\n    }\n\n    if (severity === MessageSeverity.Warning) {\n      output += chalk.yellow.bold('Warning') + ': '\n    } else {\n      output += chalk.red.bold('Error') + ': '\n    }\n\n    output += message\n\n    if (ruleId) {\n      output += '  ' + chalk.gray.bold(ruleId)\n    }\n  }\n\n  return output\n}\n\nexport function formatResults(baseDir: string, results: LintResult[]): string {\n  return (\n    results\n      .filter(({ messages }) => messages?.length)\n      .map(({ messages, filePath }) =>\n        formatMessage(baseDir, messages, filePath)\n      )\n      .join('\\n') + '\\n'\n  )\n}\n"]}